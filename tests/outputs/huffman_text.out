#ifndef LIB_ENCODER_H
#define LIB_ENCODER_H

//
// Created by Anarsiel on 2019-05-30.
//

#include <string>
#include <vector>

#include "reader.h"
#include "writer.h"

struct encoder {

    encoder() = default;
    encoder(std::string const &input_file_name, std::string const &outputput_file_name);

    void encode();

private:
    reader r;
    writer w;
    std::vector<std::pair<uint8_t, uint32_t>> count;

    std::vector<uint8_t> uint32_to_chars(uint32_t x);
    void convert_32bools_to_4chars(std::vector<bool> const &bools, std::vector<uint8_t> &chars);
};

#endif //LIB_ENCODER_H
#ifndef LIB_READER_H
#define LIB_READER_H

//
// Created by Anarsiel on 2019-05-30.
//

#include <fstream>

struct reader {

    explicit reader(std::string const &file_name);
    reader(reader const &other);

    reader();

    ~reader();

    uint8_t read_char();

    bool is_eof() const;

    void jmp_to_stream_beg();

private:
    std::ifstream my_file_reader;
    std::string file_name;

    size_t start_index;
    size_t end_index;

    bool eof;

    const static size_t BUFFER_SIZE = 239;
    uint8_t buffer[BUFFER_SIZE];

    void read_buffer();
};

#endif //LIB_READER_H
#ifndef LIB_WRITER_H
#define LIB_WRITER_H

//
// Created by Anarsiel on 2019-05-30.
//

#include <fstream>

struct writer {

    explicit writer(std::string const &file_name);
    writer(writer const &other);
    ~writer();

    void write_char(uint8_t c);

private:
    std::ofstream my_file_writer;
    std::string file_name;

    size_t start_index;

    const static size_t BUFFER_SIZE = 239;
    uint8_t buffer[BUFFER_SIZE];

    void write_buffer();
};

#endif //LIB_WRITER_H
//
// Created by Anarsiel on 2019-06-01.
//

#include "../headers/decoder.h"

decoder::decoder(std::string const &input_file_name, std::string const &output_file_name)
        : r(input_file_name), w(output_file_name), input_file_name(input_file_name), output_file_name(output_file_name) {}

void decoder::decode_keys_backwards() {
    // tree decode
    std::vector<uint8_t> tree;
    size_t tree_length = decode_uint32();

    for (size_t i = 0; i < tree_length; ++i) {
        tree.push_back(r.read_char());
    }

    // values decode
    size_t values_length = decode_uint32();
    std::vector<uint8_t> values_in_dfs_order(values_length);
    for (size_t i = 0; i < values_length; ++i) {
        values_in_dfs_order[i] = r.read_char();
    }

    // decode keys;
    bool was_down = true;
    std::vector<bool> bools;
    size_t index = 0;
    max_key_length = 0;
    for (size_t i = 0; i < tree.size(); ++i) {
        if (tree[i] == 'L') {
            bools.push_back(0);
            was_down = true;
        } else if (tree[i] == 'R') {
            bools.push_back(1);
            was_down = true;
        } else {
            if (was_down) {
                was_down = false;
                keys_backwards[bools] = values_in_dfs_order[index++];
                max_key_length = std::max(max_key_length, bools.size());
            }
            bools.pop_back();
        }
    }
}

void decoder::decode() {
    decode_keys_backwards();
    size_t text_size = decode_uint32();

    std::vector<bool> cur_key;
    std::vector<bool> buf_for_char(8);
    std::string output = "";
    while (!r.is_eof()) {
        size_t c = static_cast<size_t>(r.read_char());
        for (size_t i = 0; i < 8; ++i) {
            buf_for_char[7 - i] = ((c & 1) != 0);
            c >>= 1;
        }

        for (size_t i = 0; i < 8; ++i) {
            if (text_size == 0) break;
            cur_key.push_back(buf_for_char[i]);
            text_size--;

            if (keys_backwards.find(cur_key) != keys_backwards.end()) {
                w.write_char(keys_backwards[cur_key]);
                output.push_back(keys_backwards[cur_key]);
                cur_key.clear();
            }

            if (max_key_length < cur_key.size()) {
                throw std::runtime_error("Ooops! File is broken.");
            }
        }
    }

    if (text_size != 0) {
        throw std::runtime_error("Ooops! File is broken.");
    }
}

uint32_t decoder::decode_uint32() {
    uint32_t a, b, c, d;
    a = static_cast<uint32_t>(r.read_char());
    b = static_cast<uint32_t>(r.read_char());
    c = static_cast<uint32_t>(r.read_char());
    d = static_cast<uint32_t>(r.read_char());

    return (a << 24) + (b << 16) + (c << 8) + d;
}

//
// Created by Anarsiel on 2019-06-01.
//

#include <iostream>

#include "../headers/decoder.h"
#include "../headers/encoder.h"
#include "../headers/huffman.h"
#include "../headers/reader.h"
#include "../headers/writer.h"

using namespace std;

int main() {
    string input_file_name = "/Users/admin/Documents/University/#GitHub/cpp/huffman/lib/stuff/file.in";
    string output_file_name = "/Users/admin/Documents/University/#GitHub/cpp/huffman/lib/stuff/file.out";
//    string tmp = "/Users/admin/Documents/University/#GitHub/cpp/huffman/lib/stuff/tmp.out";
    {
        encoder e = encoder(input_file_name, output_file_name);
        e.encode();
    }

    {
        decoder d = decoder(output_file_name, input_file_name);
        d.decode();
    }
    return 0;
}//
 // Created by Anarsiel on 2019-05-30.
 //

 #include "../headers/writer.h"

 writer::writer(std::string const &file_name) :
         my_file_writer(file_name, std::ofstream::binary), start_index(0), file_name(file_name) {}

 writer::~writer() {
     write_buffer();
     my_file_writer.close();
 }

 void writer::write_buffer() {
     my_file_writer.write(reinterpret_cast<const char *>(buffer), start_index);
     start_index = 0;
 }

 void writer::write_char(uint8_t c) {
     if (start_index == BUFFER_SIZE) {
         write_buffer();
     }

     buffer[start_index++] = c;
 }//
  // Created by Anarsiel on 2019-05-30.
  //

  #include "../headers/reader.h"

  void reader::read_buffer() {
      my_file_reader.read(reinterpret_cast<char *>(buffer), BUFFER_SIZE);
      start_index = 0;
      end_index = my_file_reader.gcount();
      eof = (end_index == 0);
  }

  reader::reader(std::string const &file_name) :
  my_file_reader(file_name, std::ifstream::binary), start_index(0), end_index(0), file_name(file_name), eof(false) {
      if  (my_file_reader.fail()) {
          my_file_reader.close();
          throw std::runtime_error("Surprise! File not found.");
      }

      read_buffer();
  }

  reader::~reader() {
      my_file_reader.close();
  }

  bool reader::is_eof() const {
      return eof;
  }

  uint8_t reader::read_char() {
      if (is_eof()) {
          throw std::runtime_error("Oh-la-la! Unexpected end of file.");
      }

      uint8_t c = buffer[start_index++];

      if (start_index == end_index) {
          read_buffer();
      }
      return c;
  }

  void reader::jmp_to_stream_beg() {
      my_file_reader.clear();
      my_file_reader.seekg(0, my_file_reader.beg);
      eof = false;
      read_buffer();
  }//
   // Created by Anarsiel on 2019-05-31.
   //

   #include <string>
   #include <unordered_map>

   #include "../headers/huffman.h"

   struct huffman::qux {
       bool operator() (const std::pair<std::string, uint32_t>& a, const std::pair<std::string, uint32_t>& b) const {
           return a.second > b.second;
       }
   };

   void huffman::build_tree(std::vector<bool> &cur_key) {
       if (keys_backwards.find(cur_key) != keys_backwards.end()) {
           tree.push_back('U');
           values_in_dfs_order.push_back(keys_backwards[cur_key]);
           cur_key.pop_back();
           return;
       }

       tree.push_back('L');
       cur_key.push_back(false);
       build_tree(cur_key);

       tree.push_back('R');
       cur_key.push_back(true);
       build_tree(cur_key);

       tree.push_back('U');
       cur_key.pop_back();
       return;
   }

   void huffman::do_huffman(std::vector<std::pair<uint8_t, uint32_t>> const &count) {
       std::unordered_map<uint8_t, std::vector<bool>> _keys;

       std::priority_queue<std::pair<std::string, uint32_t>,
       std::vector<std::pair<std::string, uint32_t>>, qux> priority_queue;

       if (count.size() == 0) {
           return;
       }

       if (count.size() == 1) {
           keys[count[0].first] = {false};
           keys_backwards[{false}] = count[0].first;
           tree = "LU";
           values_in_dfs_order = {count[0].first};
           return;
       }

       for (size_t i = 0; i < count.size(); ++i) {
           priority_queue.push({std::string(1, count[i].first), count[i].second});
       }

       for (size_t i = 0; i < count.size() - 1; ++i) {
           auto min1 = priority_queue.top();
           priority_queue.pop();
           auto min2 = priority_queue.top();
           priority_queue.pop();

           for (size_t j = 0; j < min1.first.size(); ++j) {
               _keys[min1.first[j]].push_back(0);
           }

           for (size_t j = 0; j < min2.first.size(); ++j) {
               _keys[min2.first[j]].push_back(1);
           }

           priority_queue.push({min1.first + min2.first, min1.second + min2.second});
       }

       for (auto key : _keys) {
           auto v = key.second;
           std::reverse(v.begin(), v.end());
           keys[key.first] = v;
           keys_backwards[v] = key.first;
       }

       std::vector<bool> cur_key = {};
       build_tree(cur_key);
       tree.pop_back();
   }

   std::string const &huffman::get_tree() const {
       return tree;
   }

   std::unordered_map<uint8_t, std::vector<bool>> const &huffman::get_keys() const {
       return keys;
   }

   uint32_t huffman::get_tree_length() const {
       return tree.size();
   }

   const std::vector<uint8_t> &huffman::get_values_in_dfs_order() const {
       return values_in_dfs_order;
   }
//
// Created by Anarsiel on 2019-05-31.
//

#include <unordered_map>

#include "../headers/encoder.h"
#include "../headers/huffman.h"

encoder::encoder(std::string const &input_file_name, std::string const &outputput_file_name) : r(input_file_name), w(outputput_file_name) {}

void encoder::encode() {
    std::unordered_map<uint8_t, uint32_t> unordered_map;

    while (!r.is_eof()) {
        uint8_t c = r.read_char();
        ++unordered_map[c];
    }
    r.jmp_to_stream_beg();

    count.resize(unordered_map.size());
    size_t index = 0;
    for (auto x : unordered_map) {
        count[index++] = x;
    }

    huffman h;
    h.do_huffman(count);

    std::unordered_map<uint8_t, std::vector<bool>> keys = h.get_keys();
    std::string tree = h.get_tree();
    std::vector<uint8_t> tree_length = uint32_to_chars(h.get_tree_length());
    std::vector<uint8_t> values_in_dfs_order = h.get_values_in_dfs_order();
    std::vector<uint8_t> values_size = uint32_to_chars(values_in_dfs_order.size());

    // tree length
    for (char c : tree_length) {
        w.write_char(c);
    }

    // tree
    for (size_t i = 0; i < tree.size(); ++i) {
        w.write_char(tree[i]);
    }

    // values_size
    for (char c : values_size) {
        w.write_char(c);
    }

    // values
    for (char c : values_in_dfs_order) {
        w.write_char(c);
    }

    // encoded text length
    uint32_t enc_text_length = 0;
    for (size_t i = 0; i < count.size(); ++i) {
        enc_text_length += keys[count[i].first].size() * count[i].second;
    }

    std::vector<uint8_t> chars_enc_text_length = uint32_to_chars(enc_text_length);
    for (char c : chars_enc_text_length) {
        w.write_char(c);
    }

    // encoded text
    size_t this_index = 0, other_index = 0;
    std::vector<bool> bools(32);
    std::vector<uint8_t> chars(4);
    while (!r.is_eof()) {
        char c = r.read_char();
        std::vector<bool> other_bools = keys[c];
        other_index = 0;

        while (other_index != other_bools.size()) {
            if (this_index == 32) {
                convert_32bools_to_4chars(bools, chars);

                for (size_t i = 0; i < chars.size(); ++i) {
                    w.write_char(chars[i]);
                }
                this_index = 0;
                continue;
            }

            bools[this_index++] = other_bools[other_index++];
        }
    }

    if (this_index != 0) {
        convert_32bools_to_4chars(bools, chars);

        for (size_t i = 0; i < chars.size(); ++i) {
            w.write_char(chars[i]);
        }
    }
}

std::vector<uint8_t> encoder::uint32_to_chars(uint32_t x) {
    std::vector<bool> bools(32);
    for (size_t i = 0; i < 32; ++i) {
        bools[31 - i] = ((x & 1) != 0);
        x >>= 1;
    }
    std::vector<uint8_t> result;
    convert_32bools_to_4chars(bools, result);
    return result;
}

void encoder::convert_32bools_to_4chars(std::vector<bool> const &bools, std::vector<uint8_t> &uint8_ts) {
    uint8_ts.assign(4, 0);
    for (size_t i = 0; i < 8; ++i) {
        uint8_ts[0] += static_cast<uint8_t>(bools[i] * (1 << (7 - i % 8)));
        uint8_ts[1] += static_cast<uint8_t>(bools[i + 8] * (1 << (7 - i % 8)));
        uint8_ts[2] += static_cast<uint8_t>(bools[i + 16] * (1 << (7 - i % 8)));
        uint8_ts[3] += static_cast<uint8_t>(bools[i + 24] * (1 << (7 - (i % 8))));
    }
}